server:
  port: 8081
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/order_service?useSSL=false&serverTimezone=UTC
    username: root
    password: admin
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  application:
    name: ORDER-SERVICE
  #Setup kafka property
  kafka:
    bootstrap-servers: localhost:19092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: event:com.programmingtechie.orderservice.event.OrderNotificationEvent
              #key= event, value= com.programmingtechie.orderservice.event
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
management:
  health:
    circuit breakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0

##Resilinece4j properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        sliding-window-type: COUNT_BASED
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
##Timeout setup
  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s
##Retry setup
  retry:
    instances:
      inventory:
        max-attempts: 3
        wait-duration: 5s



